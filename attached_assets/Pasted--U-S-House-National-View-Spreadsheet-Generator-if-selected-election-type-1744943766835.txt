 # === U.S. House National View Spreadsheet Generator ===
                if selected_election_type == "U.S. House" and selected_state == "National View":
                    from collections import defaultdict
                    wb = Workbook()
                    ws = wb.active
                    ws.title = "U.S. House National View"

                    entries = election_data.get("elections", [])
                    party_labels = {"D": "Democratic", "R": "Republican", "I": "Independent"}
                    party_order = ["D", "R", "I"]

                    # === Header Rows ===
                    ws.cell(row=2, column=1, value="State")
                    ws.cell(row=2, column=2, value="District")
                    col = 3
                    for party in party_order:
                            ws.cell(row=1, column=col, value=party_labels[party])
                            ws.merge_cells(start_row=1, start_column=col, end_row=1, end_column=col + 2)
                            ws.cell(row=2, column=col, value="Candidate")
                            ws.cell(row=2, column=col + 1, value="#")
                            ws.cell(row=2, column=col + 2, value="%")
                            col += 3

                        ws.cell(row=1, column=col, value="Margins & Rating")
                    ws.merge_cells(start_row=1, start_column=col, end_row=1, end_column=col + 3)
                    ws.cell(row=2, column=col, value="Margin #")
                    ws.cell(row=2, column=col + 1, value="Margin %")
                    ws.cell(row=2, column=col + 2, value="Total Vote")
                    ws.cell(row=2, column=col + 3, value="Rating")

                    for r in range(1, 3):
                            for c in range(1, col + 4):
                                cell = ws.cell(row=r, column=c)
                                cell.font = Font(bold=True)
                                cell.alignment = Alignment(horizontal="center")

                        row_idx = 3
                        totals = {party: 0 for party in party_order}
                        grand_total = 0

                        for entry in entries:
                            state = entry.get("state", "??")
                            district = entry.get("district", "?")
                            ws.cell(row=row_idx, column=1, value=state)
                            ws.cell(row=row_idx, column=2, value=district)

                            # Group candidates by party
                            party_groups = defaultdict(list)
                            for c in entry.get("cands", []):
                                party_groups[c["party"]].append(c)

                            # Determine winner
                            all_cands = sorted(entry.get("cands", []), key=lambda x: x["votes"], reverse=True)
                            winner = all_cands[0]["name"] if all_cands else None
                            winner_party = all_cands[0]["party"] if all_cands else None

                            # Prepare vote summary by party
                            party_votes = {}
                            party_names = {}
                            total_vote = sum(c["votes"] for c in entry.get("cands", []))

                            for party in party_order:
                                candidates = sorted(party_groups.get(party, []), key=lambda x: x["votes"], reverse=True)
                                if not candidates:
                                    party_names[party] = ""
                                    party_votes[party] = 0
                                    continue

                                if len(candidates) == 1:
                                    party_names[party] = candidates[0]["name"]
                                    party_votes[party] = candidates[0]["votes"]
                                else:
                                    if candidates[0]["name"] == winner:
                                        combined = sum(c["votes"] for c in candidates)
                                        party_names[party] = candidates[0]["name"]
                                        party_votes[party] = combined
                                    else:
                                        party_names[party] = candidates[0]["name"]
                                        party_votes[party] = candidates[0]["votes"]
                                        # Move lowest-vote candidate to Independent
                                        lowest = candidates[-1]
                                        party_names["I"] = lowest["name"]
                                        party_votes["I"] += lowest["votes"]

                            col_idx = 3
                            for party in party_order:
                                name = party_names.get(party, "")
                                votes = int(round(party_votes.get(party, 0)))
                                pct = round(votes / total_vote * 100, 2) if total_vote else 0

                                ws.cell(row=row_idx, column=col_idx, value=name)
                                ws.cell(row=row_idx, column=col_idx + 1, value=f"{votes:,}")
                                ws.cell(row=row_idx, column=col_idx + 2, value=f"{pct:.2f}%")

                                totals[party] += votes
                                col_idx += 3

                            sorted_votes = sorted(party_votes.items(), key=lambda x: x[1], reverse=True)
                            margin = int(round(sorted_votes[0][1] - (sorted_votes[1][1] if len(sorted_votes) > 1 else 0)))
                            margin_pct = round(margin / total_vote * 100, 2) if total_vote else 0
                            rating = "Tilt" if margin_pct < 1 else "Lean" if margin_pct < 5 else "Likely" if margin_pct < 10 else "Safe"
                            rating_label = f"{rating} {party_labels.get(sorted_votes[0][0], sorted_votes[0][0])}"

                            ws.cell(row=row_idx, column=col_idx, value=f"{margin:,}")
                            ws.cell(row=row_idx, column=col_idx + 1, value=f"{margin_pct:.2f}%")
                            ws.cell(row=row_idx, column=col_idx + 2, value=f"{int(round(total_vote)):,}")
                            ws.cell(row=row_idx, column=col_idx + 3, value=rating_label)

                            grand_total += total_vote
                            row_idx += 1

                        # === Totals Row ===
                        ws.cell(row=row_idx, column=1, value="TOTALS")
                        ws.cell(row=row_idx, column=2, value="")
                        col_idx = 3
                        for party in party_order:
                            total = totals[party]
                            pct = round(total / grand_total * 100, 2) if grand_total else 0
                            ws.cell(row=row_idx, column=col_idx, value="")
                            ws.cell(row=row_idx, column=col_idx + 1, value=f"{total:,}")
                            ws.cell(row=row_idx, column=col_idx + 2, value=f"{pct:.2f}%")
                            col_idx += 3

                        ws.cell(row=row_idx, column=col_idx, value="")
                        ws.cell(row=row_idx, column=col_idx + 1, value="")
                        ws.cell(row=row_idx, column=col_idx + 2, value=f"{int(round(grand_total)):,}")
                        ws.cell(row=row_idx, column=col_idx + 3, value="")

                        for c in range(1, col_idx + 4):
                            ws.cell(row=row_idx, column=c).font = Font(bold=True)

                        # === Streamlit Display ===
                        from io import BytesIO
                        st.subheader("ðŸ§¾ U.S. House National View")
                        file_stream = BytesIO()
                        wb.save(file_stream)
                        file_stream.seek(0)

                        excel_rows = []
                        for row in ws.iter_rows(min_row=1, max_row=ws.max_row, values_only=True):
                            excel_rows.append(list(row))

                        header_row = []
                        data_rows = []

                        if len(excel_rows) >= 2:
                            row1 = excel_rows[0]
                            row2 = excel_rows[1]
                            used_names = {}

                            for col1, col2 in zip(row1, row2):
                                if col1 and col2:
                                    label = f"{col1} - {col2}"
                                elif col1:
                                    label = str(col1)
                                elif col2:
                                    label = str(col2)
                                else:
                                    label = "Unnamed"

                                if label in used_names:
                                    count = used_names[label] + 1
                                    used_names[label] = count
                                    label = f"{label} ({count})"
                                else:
                                    used_names[label] = 1

                                header_row.append(label)

                            data_rows = excel_rows[2:]

                        if header_row and data_rows:
                            df_display = pd.DataFrame(data_rows)
                            df_display.columns = header_row
                            st.dataframe(df_display, use_container_width=True)

                        st.download_button(
                            label="ðŸ“¥ Download House Spreadsheet",
                            data=file_stream,
                            file_name="House_National_View.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                            key="house_national_view"
                        )