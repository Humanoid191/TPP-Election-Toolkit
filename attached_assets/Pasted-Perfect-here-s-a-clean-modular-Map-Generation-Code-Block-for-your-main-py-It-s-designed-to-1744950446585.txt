Perfect ‚Äî here‚Äôs a clean, modular **Map Generation Code Block** for your `main.py`. It‚Äôs designed to be dropped into your existing Streamlit app and integrates with your current session logic and spreadsheet display system.

---

## ‚úÖ üîß Drop-In Code for Map Generation UI + Logic

Paste this **below your spreadsheet generation section**, ideally near the bottom of your main script.

```python
# === MAP GENERATION UI & LOGIC ===
import os
from bs4 import BeautifulSoup
from io import BytesIO
import cairosvg

st.sidebar.header("üó∫Ô∏è Map Generator Settings")

if "election_data" in st.session_state and selected_election_type and selected_state:
    with st.sidebar.expander("Map Settings"):
        st.markdown("### Margin Thresholds")
        use_margin_shading = st.checkbox("Use Margin-Based Shading", value=True)

        tilt_max = st.slider("Tilt Max (%)", 0.1, 5.0, 1.0, step=0.1)
        lean_max = st.slider("Lean Max (%)", 5.1, 10.0, 5.0, step=0.1)
        likely_max = st.slider("Likely Max (%)", 10.1, 15.0, 10.0, step=0.1)

        st.markdown("### Party Color Customizer")
        colors = {
            "D": {
                "Safe": st.color_picker("Safe Democratic", "#1C408C"),
                "Likely": st.color_picker("Likely Democratic", "#577CCC"),
                "Lean": st.color_picker("Lean Democratic", "#8AAFFF"),
                "Tilt": st.color_picker("Tilt Democratic", "#B3C4E7"),
            },
            "R": {
                "Safe": st.color_picker("Safe Republican", "#BF1D29"),
                "Likely": st.color_picker("Likely Republican", "#FF5865"),
                "Lean": st.color_picker("Lean Republican", "#FF8B98"),
                "Tilt": st.color_picker("Tilt Republican", "#CF8980"),
            },
            "I": {
                "Safe": st.color_picker("Safe Independent", "#888888"),
                "Likely": st.color_picker("Likely Independent", "#AAAAAA"),
                "Lean": st.color_picker("Lean Independent", "#CCCCCC"),
                "Tilt": st.color_picker("Tilt Independent", "#E0E0E0"),
            }
        }

    if st.sidebar.button("üó∫Ô∏è Generate Map"):
        # Determine which SVG file to use
        svg_path = None
        state_code = next((code for code, name in state_code_to_name.items() if name == selected_state), selected_state)

        if selected_election_type == "President":
            svg_path = "svg/presidential.svg"
        elif selected_election_type in ["Senate", "Governor"]:
            svg_path = "svg/states.svg"
        elif selected_election_type in ["U.S. House", "State House", "State Senate"]:
            svg_path = f"svg/{state_code}.svg"

        if not svg_path or not os.path.exists(svg_path):
            st.error(f"SVG map for this selection not found: {svg_path}")
        else:
            with open(svg_path, "r", encoding="utf-8") as f:
                soup = BeautifulSoup(f.read(), "xml")

            # Extract data from spreadsheet df
            df_map = df.copy()

            region_colors = {}
            for _, row in df_map.iterrows():
                region_id = None
                if selected_election_type == "President":
                    region_id = row["State"]
                elif selected_election_type in ["Senate", "Governor"]:
                    region_id = row["State"]
                else:
                    region_id = row["County"].replace(" ", "_").lower()

                rating = row.get("Rating", "")
                party = rating.split(" ")[-1] if " " in rating else None
                margin_str = row.get("Margin %", "0%").replace("%", "")
                try:
                    margin = float(margin_str)
                except:
                    margin = 0

                if not party or party not in colors:
                    continue

                if not use_margin_shading:
                    shade = "Safe"
                elif margin < tilt_max:
                    shade = "Tilt"
                elif margin < lean_max:
                    shade = "Lean"
                elif margin < likely_max:
                    shade = "Likely"
                else:
                    shade = "Safe"

                fill = colors[party][shade]
                region_colors[region_id.lower()] = fill

            # Apply colors to SVG
            for path in soup.find_all(["path", "g"]):
                region_id = path.get("id", "").lower()
                if region_id in region_colors:
                    path["style"] = f"fill:{region_colors[region_id]};stroke:#000000;stroke-width:1"

            # Output the final SVG
            svg_output = str(soup)
            st.subheader("üó∫Ô∏è Generated Election Map")

            # Display SVG as PNG
            png_bytes = cairosvg.svg2png(bytestring=svg_output.encode("utf-8"))
            st.image(png_bytes)

            # Download Button
            st.download_button(
                label="üì• Download SVG Map",
                data=svg_output.encode("utf-8"),
                file_name=f"{state_code}_{selected_election_type}_Map.svg",
                mime="image/svg+xml",
                key=f"{state_code}_{selected_election_type}_map"
            )
```

---

## üìù Final Notes

- You can paste this **right below spreadsheet rendering**.
- `df` must refer to the **most recent spreadsheet DataFrame** used for this election (already handled if integrated properly).
- The `state_code_to_name` dictionary must be defined somewhere earlier in the script (as it already is).

---

Would you like me to help create a **modular function version** of this too, in case we want to refactor it into a `map_generator.py`?