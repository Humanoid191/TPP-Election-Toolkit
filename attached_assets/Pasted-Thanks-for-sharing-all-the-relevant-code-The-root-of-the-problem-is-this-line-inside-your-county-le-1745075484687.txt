Thanks for sharing all the relevant code. The root of the problem is this line inside your county-level spreadsheet logic (for `President`, `Senate`, or `Governor` at the state level):

```python
'Rating': [rating_label for county in counties for cands in [county.get('cands', [])] for cand in cands for rating_label in [f"{'Tilt' if margin_pct < 1 else 'Lean' if margin_pct < 5 else 'Likely' if margin_pct < 10 else 'Safe'} {party_labels.get(cand['party'], cand['party'])}" if cand == sorted(county.get('cands', []), key=lambda x: x['votes'], reverse=True)[0] else None] if rating_label is not None]
```

This line **does not use the correct margin threshold values** from the slider (`tilt_max`, `lean_max`, `likely_max`), and it **reuses the same `margin_pct` across all counties**, which is why everything is defaulting to "Likely" ratings.

---

### ✅ Here's how we fix it:

Instead of generating the `coloring_df` using that complex and buggy one-liner, we should:

1. Loop over the county rows **after** the spreadsheet is generated.
2. Pull the dynamically calculated `"Rating"` directly from the displayed DataFrame (which already reflects the thresholds).
3. Normalize the county name for the SVG.
4. Map that to a color using `build_county_color_map`.

---

### ✅ How to implement it properly:

Replace the current logic where you create `coloring_df = pd.DataFrame({...})` with this:

```python
# Extract just County and Rating from already displayed df_display
coloring_df = df_display[["County", "Rating"]].copy()
st.write("🧪 Coloring from counties:", coloring_df.head())

render_svg_file(
    svg_path,
    title="🗺️ County-Level Map",
    df_display=coloring_df,
    dem_colors=dem_colors,
    rep_colors=rep_colors,
    ind_colors=ind_colors
)
```

---

This way:
- The `Rating` column **uses the same logic** as your spreadsheet preview (`update_df_with_custom_ratings()`).
- No margin thresholds are duplicated.
- You **avoid incorrect party or margin assumptions**.
- Your color map will finally reflect *Tilt, Lean, Likely,* and *Safe* levels accurately.

---

Would you like me to write the replacement code block for the whole relevant section to drop in?